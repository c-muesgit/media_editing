import os
import sys
import numpy as np
import librosa
import matplotlib.pyplot as plt
from scipy import signal
import tkinter as tk
from tkinter import filedialog, ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import csv
import threading
import soundfile as sf
def analyze_audio_file(file_path, quick_mode=False):
    """
    Optimized version: Analyze an audio file to determine if it's likely lossless or lossy compressed.
    
    Parameters:
    file_path (str): Path to the audio file
    quick_mode (bool): If True, perform a faster analysis with fewer features
    
    Returns:
    dict: Analysis results
    """
    try:
        # ‚úÖ 1Ô∏è‚É£ CHECK FILE SIZE TO PREVENT RAM OVERLOAD
        file_size_mb = os.path.getsize(file_path) / (1024 * 1024)  # Convert to MB
        
        # ‚úÖ 2Ô∏è‚É£ LOAD AUDIO HEADER FIRST TO GET SAMPLE RATE
        audio_info = sf.info(file_path)
        sr = audio_info.samplerate  # Get sample rate
        
        # ‚úÖ NEW: DETERMINE OPTIMAL DURATION AND DOWNSAMPLING BASED ON QUICK MODE
        if quick_mode:
            max_duration = 3  # Analyze just 3 seconds in quick mode
            target_sr = min(sr, 44100)  # Downsample to 44.1kHz max in quick mode
        else:
            max_duration = 6  # Analyze 6 seconds in normal mode (reduced from 10)
            target_sr = min(sr, 48000)  # Downsample to 48kHz max in normal mode
        
        # ‚úÖ 3Ô∏è‚É£ LOAD A LIMITED SEGMENT OF THE AUDIO AND CONVERT TO MONO IF STEREO
        frames_to_read = sr * max_duration
        y, sr = sf.read(file_path, dtype="float32", frames=frames_to_read)
        
        # Convert to mono if stereo - huge performance boost
        if len(y.shape) > 1 and y.shape[1] > 1:
            y = y.mean(axis=1)
        
        duration = len(y) / sr  # Actual duration of the loaded segment
        
        # Downsample if needed to improve performance
        if sr > target_sr:
            y = librosa.resample(y, orig_sr=sr, target_sr=target_sr)
            sr = target_sr
        
        # ‚úÖ 4Ô∏è‚É£ DETERMINE BIT DEPTH SAFELY
        bit_depth_map = {"PCM_16": 16, "PCM_24": 24, "PCM_32": 32}
        bit_depth = bit_depth_map.get(audio_info.subtype, "Unknown")
        
        # ‚úÖ 5Ô∏è‚É£ CHECK IF FILE IS TOO SHORT FOR STFT
        if len(y) < 1024:
            return {
                "error": "Audio file too short for analysis",
                "filename": os.path.basename(file_path)
            }
        
        # ‚úÖ 6Ô∏è‚É£ OPTIMIZE STFT PARAMETERS BASED ON QUICK MODE
        if quick_mode:
            n_fft = 512  # Smaller FFT size for quick mode
            hop_length = 256
        else:
            n_fft = 1024  # Reduced from original for better performance
            hop_length = 512
        
        # Limit analyzed frames for very long files
        max_frames = 100  # Limit spectral analysis to this many frames
        
        # Use librosa's optimized STFT
        S = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))
        
        # Limit number of frames if needed
        if S.shape[1] > max_frames:
            S = S[:, :max_frames]
            
        fft_freqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
        
        # ‚úÖ 7Ô∏è‚É£ MORE EFFICIENT HIGH-FREQUENCY ENERGY CALCULATIONS
        # Precompute frequency masks to avoid repeated array operations
        high_freq_mask = fft_freqs > 15000
        highest_freq_mask = fft_freqs > 20000
        
        # Only compute if we have high frequency data
        if np.any(high_freq_mask):
            # Calculate energy ratio more efficiently
            total_energy = np.sum(S)
            if total_energy > 0:
                upper_freq_energy = np.sum(S[high_freq_mask, :]) / total_energy
                highest_freq_energy = np.sum(S[highest_freq_mask, :]) / total_energy if np.any(highest_freq_mask) else 0.0
            else:
                upper_freq_energy = highest_freq_energy = 0.0
        else:
            upper_freq_energy = highest_freq_energy = 0.0
            
        # ‚úÖ 8Ô∏è‚É£ SIMPLIFIED SPECTRAL FLATNESS - ONLY COMPUTE FOR NORMAL MODE
        if not quick_mode and np.any(high_freq_mask & (fft_freqs < 20000)):
            flatness_mask = (fft_freqs > 15000) & (fft_freqs < 20000)
            high_freq_band = S[flatness_mask, :]
            if high_freq_band.size > 0:
                spectral_flatness_high = librosa.feature.spectral_flatness(S=high_freq_band).mean()
            else:
                spectral_flatness_high = 0.0
        else:
            spectral_flatness_high = 0.0
            
        # ‚úÖ 9Ô∏è‚É£ SIMPLIFIED SILENCE DETECTION - ONLY FOR NORMAL MODE
        if not quick_mode:
            # Use a simpler RMS calculation for silence detection
            frame_length = 2048
            hop_length = 1024
            energy = librosa.feature.rms(y=y, frame_length=frame_length, hop_length=hop_length)
            if energy.size > 0:
                silence_noise = np.mean(energy[energy < np.percentile(energy, 5)])
            else:
                silence_noise = 0.0
        else:
            silence_noise = 0.0
            
        # ‚úÖ üîü LOSSLESS DETECTION CRITERIA - SIMPLIFIED FOR QUICK MODE
        if quick_mode:
            is_likely_lossless = (
                sr >= 44100 and  # At least CD quality
                upper_freq_energy > 0.005  # Just check upper frequency content
            )
        else:
            is_likely_lossless = (
                sr >= 44100 and  # At least CD quality
                (upper_freq_energy > 0.005 or highest_freq_energy > 0.0005)  # Detailed check
            )
        
        # Build result dict with only necessary fields based on quick_mode
        results = {
            "filename": os.path.basename(file_path),
            "full_path": file_path,  # For plotting
            "file_size_MB": file_size_mb,
            "sample_rate": audio_info.samplerate,  # Use original sample rate
            "bit_depth_estimation": bit_depth,
            "duration_analyzed": duration,
            "upper_freq_energy_ratio": upper_freq_energy,
            "highest_freq_energy_ratio": highest_freq_energy,
            "likely_lossless": is_likely_lossless
        }
        
        # Only include detailed analysis for normal mode
        if not quick_mode:
            results.update({
                "spectral_flatness_high_freq": spectral_flatness_high,
                "silence_noise_level": silence_noise
            })
            
        return results
    
    except Exception as e:
        return {"error": str(e), "filename": os.path.basename(file_path), "full_path": file_path}

def analyze_directory(directory_path, output_file=None, callback=None, quick_mode=False):
    """
    Optimized version: Analyze all audio files in a directory and subdirectories
    
    Parameters:
    directory_path (str): Path to directory containing audio files
    output_file (str): Path to save CSV results (optional)
    callback (function): Function to call with progress updates
    quick_mode (bool): If True, perform a faster analysis with fewer features
    
    Returns:
    list: Analysis results for each file
    """
    results = []
    
    # Reduced list of audio extensions for faster file checking
    audio_extensions = ['.wav', '.flac', '.aiff', '.aif', '.mp3', '.m4a', '.ogg', '.opus']
    
    # Optimize file finding - don't process too many files at once
    audio_files = []
    max_files = 1000  # Set a reasonable limit for large directories
    file_count = 0
    
    for root, _, files in os.walk(directory_path):
        for file in files:
            if any(file.lower().endswith(ext) for ext in audio_extensions):
                audio_files.append(os.path.join(root, file))
                file_count += 1
                if file_count >= max_files:
                    break
        if file_count >= max_files:
            break
    
    # Process files in batches to reduce memory usage
    batch_size = 10
    total_files = len(audio_files)
    
    for i in range(0, total_files, batch_size):
        batch_files = audio_files[i:i+batch_size]
        
        for j, file_path in enumerate(batch_files):
            current_index = i + j
            if callback:
                callback(current_index, total_files, file_path)
            
            result = analyze_audio_file(file_path, quick_mode)
            results.append(result)
    
    # Save results to CSV if output file specified and more than one file was analyzed
    if output_file and len(results) > 1:
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            if results and not all("error" in r for r in results):
                # Find a result without error to get field names
                sample_result = next((r for r in results if "error" not in r), None)
                if sample_result:
                    writer = csv.DictWriter(f, fieldnames=sample_result.keys())
                    writer.writeheader()
                    writer.writerows(results)
    
    if callback:
        callback(total_files, total_files, "Complete")
    
    return results

class SimpleLosslessDetectorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Lossless Audio Detector")
        self.root.geometry("800x600")
        self.root.minsize(700, 500)
        
        # Main frame with padding
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # File selection frame
        file_frame = ttk.Frame(main_frame)
        file_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(file_frame, text="Select File", command=self.browse_file).pack(side=tk.LEFT, padx=5)
        ttk.Button(file_frame, text="Select Folder", command=self.browse_directory).pack(side=tk.LEFT, padx=5)
        
        self.quick_mode_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(file_frame, text="Quick Analysis Mode", variable=self.quick_mode_var).pack(side=tk.RIGHT, padx=5)
        
        # Path display
        self.file_path_var = tk.StringVar()
        ttk.Label(main_frame, textvariable=self.file_path_var, wraplength=780).pack(fill=tk.X, pady=5, anchor=tk.W)
        
        # Progress frame
        progress_frame = ttk.Frame(main_frame)
        progress_frame.pack(fill=tk.X, pady=5)
        
        self.progress_var = tk.StringVar(value="Ready")
        ttk.Label(progress_frame, textvariable=self.progress_var).pack(side=tk.LEFT, padx=5)
        
        self.progress_bar = ttk.Progressbar(progress_frame, orient=tk.HORIZONTAL, length=300, mode='determinate')
        self.progress_bar.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        # Results area - using a Notebook with tabs
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Create the tabs
        self.results_tab = ttk.Frame(self.notebook)
        self.plot_tab = ttk.Frame(self.notebook)
        
        self.notebook.add(self.results_tab, text="Results")
        self.notebook.add(self.plot_tab, text="Spectrum")
        
        # Results text area
        self.results_text = tk.Text(self.results_tab, wrap=tk.WORD)
        results_scroll = ttk.Scrollbar(self.results_tab, command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=results_scroll.set)
        
        self.results_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # The plot frame remains empty until needed
        
        # Analysis thread
        self.analysis_thread = None
    
    def browse_file(self):
        filetypes = (
            ("Audio files", "*.wav *.flac *.aiff *.aif *.mp3 *.m4a *.ogg *.opus"),
            ("All files", "*.*")
        )
        filename = filedialog.askopenfilename(
            title="Select an audio file",
            filetypes=filetypes
        )
        if filename:
            self.file_path_var.set(filename)
            self.analyze_selection(filename)
    
    def browse_directory(self):
        directory = filedialog.askdirectory(
            title="Select a directory containing audio files"
        )
        if directory:
            self.file_path_var.set(directory)
            self.analyze_selection(directory)
    
    def analyze_selection(self, path):
        # Clear previous results
        self.results_text.delete(1.0, tk.END)
        
        # Clear previous plot
        for widget in self.plot_tab.winfo_children():
            widget.destroy()
        
        # Reset progress
        self.progress_bar["value"] = 0
        self.progress_var.set("Starting analysis...")
        
        # Disable browsing during analysis
        self.disable_buttons()
        
        # Run analysis in a separate thread
        quick_mode = self.quick_mode_var.get()
        self.analysis_thread = threading.Thread(
            target=self.run_analysis_thread,
            args=(path, quick_mode)
        )
        self.analysis_thread.daemon = True
        self.analysis_thread.start()
    
    def run_analysis_thread(self, path, quick_mode):
        try:
            if os.path.isdir(path):
                # For directories, create a default CSV file name
                csv_file = os.path.join(path, "lossless_analysis_results.csv")
                
                # Define a progress callback
                def progress_callback(current, total, current_file):
                    progress_pct = int((current / total) * 100) if total > 0 else 0
                    self.root.after(0, lambda: self.update_progress(progress_pct, current, total, current_file))
                
                # Run the analysis
                results = analyze_directory(path, csv_file, progress_callback, quick_mode)
                
                # Display results on the main thread
                self.root.after(0, lambda: self.show_directory_results(results, csv_file))
                
            else:
                # For single files, run the analysis
                result = analyze_audio_file(path, quick_mode)
                
                # Display the result on the main thread
                self.root.after(0, lambda: self.show_file_result(result))
        except Exception as e:
            self.root.after(0, lambda: self.show_error(str(e)))
        finally:
            # Re-enable buttons on the main thread
            self.root.after(0, self.enable_buttons)
    
    def update_progress(self, progress_pct, current, total, current_file):
        self.progress_bar["value"] = progress_pct
        if current < total:
            filename = os.path.basename(current_file)
            self.progress_var.set(f"Analyzing {current}/{total}: {filename}")
        else:
            self.progress_var.set("Analysis complete")
    
    def show_directory_results(self, results, csv_file):
        # Count results
        total_files = len(results)
        lossless_count = sum(1 for r in results if "likely_lossless" in r and r["likely_lossless"])
        lossy_count = sum(1 for r in results if "likely_lossless" in r and not r["likely_lossless"])
        error_count = sum(1 for r in results if "error" in r)
        
        # Display summary
        self.results_text.insert(tk.END, f"Directory Analysis Complete\n")
        self.results_text.insert(tk.END, f"------------------------------\n")
        self.results_text.insert(tk.END, f"Total files analyzed: {total_files}\n")
        self.results_text.insert(tk.END, f"Likely lossless files: {lossless_count}\n")
        self.results_text.insert(tk.END, f"Likely lossy files: {lossy_count}\n")
        self.results_text.insert(tk.END, f"Files with errors: {error_count}\n\n")
        
        if os.path.exists(csv_file) and total_files > 1:
            self.results_text.insert(tk.END, f"Results saved to: {csv_file}\n\n")
        
        # Display individual file results
        self.results_text.insert(tk.END, "File Details:\n")
        self.results_text.insert(tk.END, f"------------------------------\n")
        
        for result in results:
            if "error" in result:
                self.results_text.insert(tk.END, f"‚ùå {result['filename']}: Error - {result['error']}\n")
            else:
                status = "‚úÖ LOSSLESS" if result["likely_lossless"] else "‚ùó LOSSY"
                self.results_text.insert(tk.END, f"{status}: {result['filename']} ({result['sample_rate']} Hz)\n")
        
        # If there's at least one valid result, show its spectrum
        valid_result = next((r for r in results if "error" not in r), None)
        if valid_result:
            self.display_plot(valid_result["full_path"])
            self.notebook.select(1)  # Switch to the plot tab
    
    def show_file_result(self, result):
        if "error" in result:
            self.results_text.insert(tk.END, f"Error analyzing file: {result['error']}")
            self.progress_var.set("Analysis failed")
        else:
            # Display detailed result
            lossless_status = "LIKELY LOSSLESS" if result["likely_lossless"] else "LIKELY LOSSY"
            self.results_text.insert(tk.END, f"File Analysis Result\n")
            self.results_text.insert(tk.END, f"------------------------------\n")
            self.results_text.insert(tk.END, f"File: {result['filename']}\n")
            self.results_text.insert(tk.END, f"Sample rate: {result['sample_rate']} Hz\n")
            self.results_text.insert(tk.END, f"Estimated bit depth: {result['bit_depth_estimation']}\n")
            self.results_text.insert(tk.END, f"Duration: {result['duration']:.2f} seconds\n")
            self.results_text.insert(tk.END, f"Upper frequency energy ratio (>16kHz): {result['upper_freq_energy_ratio']:.6f}\n")
            self.results_text.insert(tk.END, f"Highest frequency energy ratio (>20kHz): {result['highest_freq_energy_ratio']:.6f}\n")
            self.results_text.insert(tk.END, f"High frequency spectral flatness: {result['spectral_flatness_high_freq']:.6f}\n")
            
            if "silence_noise_level" in result:
                self.results_text.insert(tk.END, f"Silent segments noise level: {result['silence_noise_level']:.6f}\n")
            
            if "frequency_variation" in result:
                self.results_text.insert(tk.END, f"Frequency variation: {result['frequency_variation']:.6f}\n")
                
            self.results_text.insert(tk.END, f"\nAnalysis result: {lossless_status}\n")
            
            # Explanation of results
            self.results_text.insert(tk.END, f"\nWhat does this mean?\n")
            self.results_text.insert(tk.END, f"------------------------------\n")
            if result["likely_lossless"]:
                self.results_text.insert(tk.END, 
                    "This file appears to be lossless. It has the expected characteristics of "
                    "uncompressed audio including frequency content up to or beyond 20kHz. "
                    f"Sample rate: {result['sample_rate']} Hz.\n"
                )
            else:
                self.results_text.insert(tk.END, 
                    "This file appears to be lossy compressed. Common indicators include "
                    "limited frequency content (especially above 16kHz) and lack of energy near or above 22kHz. "
                    f"Sample rate: {result['sample_rate']} Hz.\n"
                )
            
            # Display the spectral plot
            self.display_plot(result["full_path"])
            
            # Update status
            self.progress_var.set(f"Analysis complete: {lossless_status}")
            
            # Switch to the plot tab
            self.notebook.select(1)
    
    def show_error(self, error_msg):
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, f"Error: {error_msg}")
        self.progress_var.set("Analysis failed")
    
    def disable_buttons(self):
        for widget in self.root.winfo_children():
            if isinstance(widget, ttk.Button):
                widget.configure(state='disabled')
    
    def enable_buttons(self):
        for widget in self.root.winfo_children():
            if isinstance(widget, ttk.Button):
                widget.configure(state='normal')
    
    def display_plot(self, file_path):
        try:
            # Clear previous plot
            for widget in self.plot_tab.winfo_children():
                widget.destroy()
            
            # Optimize audio loading for plotting
            max_duration = 5  # Only plot 5 seconds max
            y, sr = librosa.load(file_path, sr=None, duration=max_duration, mono=True)
            
            # Use a smaller FFT size for faster spectrogram calculation
            n_fft = 1024
            hop_length = 512
            
            # Calculate the STFT more efficiently
            S = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))
            
            # Create a figure for the plot
            fig = plt.Figure(figsize=(8, 6), dpi=90)  # Slightly smaller for faster rendering
            
            # Plot the spectrogram
            ax = fig.add_subplot(111)
            img = librosa.display.specshow(
                librosa.amplitude_to_db(S, ref=np.max),
                y_axis='log', 
                x_axis='time', 
                sr=sr,
                hop_length=hop_length,
                ax=ax
            )
            
            # Add a colorbar
            cbar = fig.colorbar(img, ax=ax, format='%+2.0f dB')
            cbar.set_label('Intensity (dB)')
            
            # Add lines showing key frequencies
            ax.axhline(y=16000, color='r', linestyle='--', alpha=0.7, label='16kHz')
            ax.axhline(y=20000, color='g', linestyle='--', alpha=0.7, label='20kHz')
            
            # Only show this line if the sample rate supports it
            if sr >= 44100:
                ax.axhline(y=22050, color='b', linestyle='--', alpha=0.7, label='22.05kHz')
            
            # Set labels and title
            ax.set_title('Audio Spectrum Analysis')
            ax.set_xlabel('Time (s)')
            ax.set_ylabel('Frequency (Hz)')
            
            # Set y-axis limit based on sample rate
            ax.set_ylim(top=min(22050, sr/2))  # Limit to Nyquist frequency
            
            # Use a smaller legend for better performance
            ax.legend(loc='upper right', fontsize='small')
            
            # Embed the plot in the GUI
            canvas = FigureCanvasTkAgg(fig, master=self.plot_tab)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
        except Exception as e:
            error_label = ttk.Label(self.plot_tab, text=f"Error displaying plot: {str(e)}")
            error_label.pack(pady=20)

def main():
    # Start the GUI
    root = tk.Tk()
    app = SimpleLosslessDetectorGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()